{"version":3,"sources":["components/AppHeader.js","components/StockTable.js","actions/stock.js","utils/helper.js","components/StockGraph.js","components/Home.js","components/UnsafeScriptWarning.js","app.js","reducers/stocks.reducer.js","sagas/stocks.saga.js","index.js"],"names":["Header","Layout","AppHeader","props","className","render","online","type","columns","title","dataIndex","key","stockPrice","changePercent","style","color","stockTrend","length","date","StockTable","dataSource","data","Object","values","modifyData","this","width","bordered","showHeader","rowKey","pagination","defaultPageSize","pageSize","PureComponent","LOAD_PAGE","INCOMING_STOCKS","SELECT_STOCK","SERVER_ERROR","options","chart","id","animations","enabled","easing","speed","animateGradually","delay","dynamicAnimation","dataLabels","colors","offsetX","tooltip","shared","followCursor","marker","show","stroke","curve","text","align","toolbar","tools","selection","zoom","zoomin","zoomout","pan","reset","onDatasetHover","highlightDataSeries","dynamicGraphOptions","xaxis","labels","formatter","value","timestamp","moment","format","yaxis","markers","size","legend","noData","fontSize","grid","borderColor","row","opacity","getSelection","filter","isSelected","getSeriesData","map","item","name","stockName","StockGraph","stocks","isEmpty","handleSelectedTab","head","selectedTabs","seriesData","ApexChart","exec","modifiedData","radioButtons","padding","onClick","getButtons","series","React","Component","connect","dispatch","e","payload","target","Home","isLoading","tip","UnsafeScriptsWarning","Modal","info","content","App","state","hasError","error","console","log","setState","UnsafeScriptWarning","Content","initialState","watchOnMessages","rootSaga","createSocketChannel","eventChannel","emit","ws","WebSocket","addEventListener","errorEvent","Error","event","JSON","parse","wasClean","code","reason","call","socketChannel","take","put","all","wsMiddleware","createSagaMiddleware","store","createStore","action","stocksFromServer","currentTime","Date","now","forEach","stock","toFixed","stockFromState","push","errorMessage","applyMiddleware","run","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.104a6765.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Layout, Button } from 'antd';\r\nimport './AppHeader.css';\r\nimport { Detector } from 'react-detect-offline';\r\n\r\nconst { Header } = Layout;\r\n\r\nexport const AppHeader = props => (\r\n  <Header className='appHeader'>\r\n    <div className='headerLeft'>\r\n      <div className='logo'></div>\r\n      <div className='pageTitle'>Live Stock</div>\r\n    </div>\r\n    <div className='headerRight'>\r\n      <Detector\r\n        render={({ online }) => (\r\n          <Button type={online ? 'primary' : 'danger'}>\r\n            {online ? 'Live' : 'Offline'}\r\n          </Button>\r\n        )}\r\n      />\r\n    </div>\r\n  </Header>\r\n);\r\n","import React, { PureComponent } from 'react';\r\nimport { Table, Icon } from 'antd';\r\nimport TimeAgo from 'react-timeago';\r\n\r\nconst columns = [\r\n  {\r\n    title: 'Name',\r\n    dataIndex: 'stockName',\r\n    key: 'stockName',\r\n  },\r\n  {\r\n    title: 'Price',\r\n    dataIndex: 'stockPrice',\r\n    key: 'stockPrice',\r\n    render: (stockPrice, { changePercent }) => {\r\n      if (!changePercent || changePercent === 0) {\r\n        return <span>{stockPrice}</span>;\r\n      }\r\n      return changePercent > 0 ? (\r\n        <span style={{ color: 'green' }}>\r\n          {stockPrice}\r\n          <Icon type='caret-up' style={{ color: 'green' }} />\r\n        </span>\r\n      ) : (\r\n        <span style={{ color: 'red' }}>\r\n          {stockPrice}\r\n          <Icon type='caret-down' style={{ color: 'red' }} />\r\n        </span>\r\n      );\r\n    },\r\n  },\r\n  {\r\n    title: '% Change',\r\n    dataIndex: 'changePercent',\r\n    key: 'changePercent',\r\n    render: changePercent => {\r\n      if (!changePercent || changePercent === 0) return;\r\n      return changePercent > 0 ? (\r\n        <span style={{ color: 'green' }}>{changePercent}</span>\r\n      ) : (\r\n        <span style={{ color: 'red' }}>{changePercent}</span>\r\n      );\r\n    },\r\n  },\r\n  {\r\n    title: 'LastUpdated',\r\n    dataIndex: 'stockTrend',\r\n    key: 'lastUpdated',\r\n    render: stockTrend => {\r\n      const length = stockTrend.length;\r\n      return <TimeAgo date={stockTrend[length - 1][0]} />;\r\n    },\r\n  },\r\n];\r\n\r\nconst modifyData = data => {\r\n  return Object.values(data);\r\n};\r\n\r\nclass StockTable extends PureComponent {\r\n  render() {\r\n    const { data } = this.props;\r\n    const dataSource = modifyData(data);\r\n\r\n    return (\r\n      <div style={{ width: '37%' }}>\r\n        <Table\r\n          columns={columns}\r\n          dataSource={dataSource}\r\n          bordered\r\n          showHeader\r\n          rowKey='stockName'\r\n          pagination={{\r\n            defaultPageSize: 8,\r\n            pageSize: 8,\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StockTable;\r\n","export const LOAD_PAGE = 'LOAD_STOCKS';\r\nexport const INCOMING_STOCKS = 'INCOMING_STOCKS';\r\nexport const SELECT_STOCK = 'SELECT_STOCK';\r\nexport const SERVER_ERROR = 'SERVER_ERROR';\r\n\r\nexport const loadPage = () => ({\r\n  type: LOAD_PAGE,\r\n  isLoading: true,\r\n});\r\n","export const options = {\r\n  chart: {\r\n    id: 'realtime',\r\n    animations: {\r\n      enabled: true,\r\n      easing: 'easeinout',\r\n      speed: 800,\r\n      animateGradually: {\r\n        enabled: true,\r\n        delay: 150,\r\n      },\r\n      dynamicAnimation: {\r\n        enabled: true,\r\n        speed: 800,\r\n      },\r\n    },\r\n    dataLabels: {\r\n      enabled: true,\r\n      style: {\r\n        colors: ['#333'],\r\n      },\r\n      offsetX: 30,\r\n    },\r\n    tooltip: {\r\n      enabled: true,\r\n      shared: true,\r\n      followCursor: true,\r\n      marker: {\r\n        show: true,\r\n      },\r\n    },\r\n    stroke: {\r\n      curve: 'smooth',\r\n    },\r\n    title: {\r\n      text: '',\r\n      align: 'left',\r\n    },\r\n    toolbar: {\r\n      show: true,\r\n      tools: {\r\n        selection: false,\r\n        zoom: true,\r\n        zoomin: true,\r\n        zoomout: true,\r\n        pan: true,\r\n        reset: true,\r\n      },\r\n      onDatasetHover: {\r\n        highlightDataSeries: true,\r\n      },\r\n    },\r\n    zoom: {\r\n      enabled: true,\r\n    },\r\n  },\r\n};\r\n","import React from 'react';\r\nimport { Button } from 'antd';\r\nimport { connect } from 'react-redux';\r\nimport { SELECT_STOCK } from '../actions';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport head from 'lodash/head';\r\nimport ReactApexChart from 'react-apexcharts';\r\nimport ApexChart from 'apexcharts';\r\nimport { options } from '../utils/helper';\r\nimport moment from 'moment';\r\n\r\nconst getButtons = (data, handleSelectedTab) => {\r\n  return data.map(item => (\r\n    <Button\r\n      style={{ padding: '0 14px' }}\r\n      value={item.stockName}\r\n      key={item.stockName}\r\n      type={item.isSelected ? 'primary' : 'default'}\r\n      size='large'\r\n      onClick={handleSelectedTab}>\r\n      {item.stockName}\r\n    </Button>\r\n  ));\r\n};\r\n\r\nconst dynamicGraphOptions = {\r\n  xaxis: {\r\n    type: 'datetime',\r\n    labels: {\r\n      formatter: function(value, timestamp) {\r\n        return moment(value).format('HH:mm:ss');\r\n      },\r\n    },\r\n    title: {\r\n      text: 'Timestamp in (HH:mm:ss)',\r\n    },\r\n  },\r\n  yaxis: {\r\n    title: {\r\n      text: 'Price ($)',\r\n    },\r\n  },\r\n  markers: {\r\n    size: 6,\r\n  },\r\n  legend: {\r\n    show: true,\r\n  },\r\n  noData: {\r\n    text: 'Loading...',\r\n    style: {\r\n      fontSize: '24px',\r\n    },\r\n  },\r\n  grid: {\r\n    borderColor: '#e7e7e7',\r\n    show: true,\r\n    row: {\r\n      colors: ['#f3f3f3', 'transparent'],\r\n      opacity: 0.5,\r\n    },\r\n  },\r\n};\r\n\r\nconst getSelection = data => data.filter(({ isSelected }) => !!isSelected);\r\n\r\nconst getSeriesData = data =>\r\n  data.map(item => ({ name: item.stockName, data: item.stockTrend }));\r\n\r\nclass StockGraph extends React.Component {\r\n  //select first tab to show graph\r\n  componentDidMount() {\r\n    const stocks = Object.values(this.props.stocks);\r\n    if (!isEmpty(stocks)) {\r\n      const { handleSelectedTab } = this.props;\r\n      handleSelectedTab(head(stocks).stockName);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const values = Object.values(this.props.stocks);\r\n    const selectedTabs = getSelection(values);\r\n    if (!isEmpty(selectedTabs)) {\r\n      const seriesData = getSeriesData(selectedTabs);\r\n\r\n      ApexChart.exec('realtime', 'updateSeries', seriesData);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { stocks, handleSelectedTab } = this.props;\r\n    const modifiedData = Object.values(stocks);\r\n    const radioButtons = getButtons(modifiedData, handleSelectedTab);\r\n    const selectedTabs = getSelection(modifiedData);\r\n    const seriesData = !isEmpty(selectedTabs)\r\n      ? getSeriesData(selectedTabs)\r\n      : [];\r\n\r\n    return (\r\n      <div style={{ width: '68%' }}>\r\n        {radioButtons}\r\n        <ReactApexChart\r\n          type='line'\r\n          options={{\r\n            ...options,\r\n            ...dynamicGraphOptions,\r\n          }}\r\n          series={seriesData}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  ({ stocks }) => ({ stocks }),\r\n  dispatch => ({\r\n    dispatch,\r\n    handleSelectedTab(e) {\r\n      const payload = typeof e === 'string' ? e : e.target.value;\r\n      dispatch({ type: SELECT_STOCK, payload });\r\n    },\r\n  }),\r\n)(StockGraph);\r\n","import React, { PureComponent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport StockTable from './StockTable';\r\nimport StockGraph from './StockGraph';\r\nimport { Spin } from 'antd';\r\nimport './Home.css';\r\n\r\nclass Home extends PureComponent {\r\n  render() {\r\n    const { stocks, isLoading } = this.props;\r\n    return isLoading ? (\r\n      <Spin tip='Fetching data...' size='large' />\r\n    ) : (\r\n      <div className='container'>\r\n        <StockGraph />\r\n        <StockTable data={stocks} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(({ stocks, isLoading }) => ({\r\n  stocks,\r\n  isLoading,\r\n}))(Home);\r\n","import React from 'react';\r\nimport { Modal } from 'antd';\r\n\r\nconst UnsafeScriptsWarning = () =>\r\n  Modal.info({\r\n    title: 'Content Blocked',\r\n    content:\r\n      \"Click on Load Unsafe Scripts to proceed. It's just an app showing stocks\",\r\n  });\r\n\r\nexport default UnsafeScriptsWarning;\r\n","import React from 'react';\nimport { Layout } from 'antd';\nimport { AppHeader } from './components/AppHeader';\nimport Home from '../src/components/Home';\nimport UnsafeScriptWarning from './components/UnsafeScriptWarning';\n\nclass App extends React.PureComponent {\n  state = {\n    hasError: false,\n  };\n\n  static getDerivedStateFromError(error) {\n    return {\n      hasError: true,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    console.log(error, info);\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    const { hasError } = this.state;\n    return hasError ? (\n      <UnsafeScriptWarning />\n    ) : (\n      <div className='App'>\n        <Layout className='appLayout'>\n          <AppHeader />\n          <Layout.Content>\n            <Home />\n          </Layout.Content>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import {\r\n  LOAD_PAGE,\r\n  INCOMING_STOCKS,\r\n  SELECT_STOCK,\r\n  SERVER_ERROR,\r\n} from '../actions/index';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\nconst initialState = {\r\n  stocks: {},\r\n};\r\n\r\nexport function stocksReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case INCOMING_STOCKS: {\r\n      const stocks = { ...state.stocks };\r\n      const { payload: stocksFromServer } = action;\r\n      const currentTime = Date.now();\r\n\r\n      stocksFromServer.forEach(stock => {\r\n        let [stockName, stockPrice] = stock;\r\n        stockPrice = +stockPrice.toFixed(2);\r\n\r\n        if (isEmpty(stocks[stockName])) {\r\n          stocks[stockName] = {\r\n            stockPrice,\r\n            stockName,\r\n            stockTrend: [[Date.now(), stockPrice]],\r\n            isSelected: false,\r\n          };\r\n        } else {\r\n          const stockFromState = stocks[stockName];\r\n\r\n          stockFromState['changePercent'] = (\r\n            ((+stockPrice - +stockFromState.stockPrice) * 100) /\r\n            +stockFromState.stockPrice\r\n          ).toFixed(2);\r\n          stockFromState.stockPrice = stockPrice;\r\n          stockFromState.stockTrend.push([currentTime, stockPrice]);\r\n        }\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        stocks,\r\n        isLoading: false,\r\n        hasError: false,\r\n      };\r\n    }\r\n\r\n    case SELECT_STOCK: {\r\n      let stockName = action.payload;\r\n      const { stocks } = state;\r\n      const stock = stocks[stockName];\r\n      stock.isSelected = !stock.isSelected;\r\n\r\n      return {\r\n        ...state,\r\n        stocks,\r\n      };\r\n    }\r\n\r\n    case LOAD_PAGE: {\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    }\r\n\r\n    case SERVER_ERROR: {\r\n      const error = action.payload;\r\n      return {\r\n        ...state,\r\n        hasError: true,\r\n        errorMessage: error,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { take, put, call, all } from 'redux-saga/effects';\r\nimport { eventChannel } from 'redux-saga';\r\nimport { INCOMING_STOCKS, SERVER_ERROR } from '../actions/stock';\r\n\r\nfunction createSocketChannel() {\r\n  return eventChannel(emit => {\r\n    const stockURL = 'ws://stocks.mnet.website';\r\n    const ws = new WebSocket(stockURL);\r\n\r\n    const openHandler = () => {\r\n      console.log('opening...');\r\n    };\r\n\r\n    const messageHandler = event => {\r\n      const payload = JSON.parse(event.data);\r\n      emit(payload);\r\n    };\r\n\r\n    const errorHandler = errorEvent => {\r\n      // create an Error object and put it into the channel\r\n      emit(new Error(errorEvent));\r\n    };\r\n    // setup the subscription\r\n    ws.addEventListener('error', errorHandler);\r\n    ws.addEventListener('open', openHandler);\r\n    ws.addEventListener('message', messageHandler);\r\n\r\n    const unsubscribe = () => {\r\n      const closeHandler = event => {\r\n        if (event.wasClean) {\r\n          console(\r\n            `[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`,\r\n          );\r\n        } else {\r\n          // e.g. server process killed or network down\r\n          console.log('[close] Connection died');\r\n        }\r\n      };\r\n      ws.addEventListener('close', closeHandler);\r\n    };\r\n\r\n    return unsubscribe;\r\n  });\r\n}\r\n\r\nfunction* watchOnMessages() {\r\n  const socketChannel = yield call(createSocketChannel);\r\n\r\n  while (true) {\r\n    try {\r\n      const payload = yield take(socketChannel);\r\n      yield put({ type: INCOMING_STOCKS, payload });\r\n    } catch (err) {\r\n      yield put({ type: SERVER_ERROR, payload: err });\r\n    }\r\n  }\r\n}\r\n\r\nexport function* rootSaga() {\r\n  yield all([watchOnMessages()]);\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { loadPage } from '../src/actions/';\nimport { stocksReducer as reducer } from '../src/reducers';\nimport { rootSaga } from '../src/sagas';\n\nconst wsMiddleware = createSagaMiddleware();\nconst store = createStore(reducer, applyMiddleware(wsMiddleware));\nwsMiddleware.run(rootSaga);\n\nstore.dispatch(loadPage());\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}